/*                                     |     Chimera Gradle Build System    |
* -------------------------------------|     !! Development Workspace !!    |------------------------------------------
*                                      --------------------------------------
* Build info:
*   - Java 17+
*   - Gradle 8.0+
*
* Core tasks:
* ~~~~~~~~~~~~~~~~~~~~
*  Compiling Chimera:
*  > `./gradlew buildChimera` OR `./gradlew bc` for short. <== yields ChimeraAPI.jar
* ~~~~~~~~~~~~~~~~~~~~
*  Compiling mods:
*  > `./gradlew buildMod` OR `./gradlew bm` for short <== yields mods.jar
* ~~~~~~~~~~~~~~~~~~~~
*  Creating an APK:
*  > `./gradlew apk` <== assumes mods.jar and ChimeraAPI.jar exist.
* ~~~~~~~~~~~~~~~~~~~~
*
* Other tasks:
* ~~~~~~~~~~~~~~~~~~~~
*  Cleanup:
*  > `./gradlew cleanBuild` to get rid of the build directory.
* ~~~~~~~~~~~~~~~~~~~~
*  Inserting core patches:
*  > `./gradlew patchAPK` <== done automatically when creating apk
* ~~~~~~~~~~~~~~~~~~~~
*
* ------------------------------------------------------------------------------------------------------------------
*/

plugins {
    id 'java'
}

repositories {
    google()
    mavenCentral()
    maven {
        url 'https://storage.googleapis.com/r8-releases/raw'
    }
}

dependencies {
    configurations.maybeCreate("tools")
    tools "com.android.tools:r8:8.2.55"
    tools "org.apktool:apktool-cli:2.11.1"
}

//=========================================v Global Variables v=========================================
def chimeraSources = fileTree('src/com/saterskog/cell_lab')
        .include('**/*.java')
        .collect { it.absolutePath }

def modSources = fileTree('src/com/saterskog/mods')
        .include('**/*.java')
        .collect { it.absolutePath }

def chimeraDir = file('chimera')
def chimeraJar = file('chimera/api/ChimeraAPI.jar')
def modJar = file('build/jar/mod.jar')
def apkURL = "https://cell-lab.net/apks/cell_lab_103.apk"

//Remote dependencies
def apktoolJar = configurations.tools.files.find { it.name.contains('apktool-cli') }
def d8Jar = configurations.tools.files.find { it.name.contains("r8") }
//=========================================^ Global Variables ^=========================================

// Sources jar for IDE integration
tasks.register('buildSourceJar',Exec){
    description 'Packages API into readable source jar for IDE integration'

    mkdir("chimera/api")
    commandLine 'jar','cf','chimera/api/ChimeraSrc.jar','src/com/saterskog/cell_lab'
}

//Invokes remote dependencies. If not cached, gradle will download them
tasks.register('fetchDependencies',Exec){
    commandLine 'java', '-jar', apktoolJar, '-version'
    commandLine 'java', '-jar', d8Jar, '--version'
}

tasks.register('compileChimera', Exec) {
    description 'Compiles Chimera Java files into build/chimera directory'

    outputs.dir('build/chimera')
    file('build/chimera').mkdirs()
    // Using --release since android tends to lag behind newer jdks and using jdk 21 makes d8 throw an error due to it being too new.
    commandLine 'javac','--release','17','-d', 'build/chimera', *chimeraSources
}

tasks.register('buildChimera',Exec){
    dependsOn compileChimera
    file('chimera/api').mkdirs()

    inputs.dir('build/chimera')
    outputs.file(chimeraJar)

    commandLine 'jar','cf',chimeraJar,'-C','build/chimera','.'
}

task buildMod(type: Exec) {
    description 'Builds the mod by depending on buildAll'

    outputs.dir('build/mods')

    file('build/mods').mkdirs()
    commandLine 'javac', '-cp', chimeraJar, '--release', '17','-d', 'build/mods', *modSources
}

task getVanillaAPK (type: Exec){
    description "downloads a vanilla Cell Lab apk from the official website"

    def apk = new File("saterskog/cell.apk")
    outputs.file(apk)
    if(!apk.exists()){
        commandLine 'curl',apkURL,'-o','saterskog/cell.apk'
    }
    else{
        commandLine 'echo','apk already present...'
    }

}

task getModJar(type: Exec){
    description 'Creates a jar containing mod classes and chimeraAPI to be converted to smali later on by d8'
    dependsOn buildMod

    mkdir('build/jar')

    inputs.dir('build/mods/com/saterskog/mods')
    outputs.file(modJar)

    commandLine 'jar','cf',modJar,'-C','build/mods','.'
}

// Task to generate DEX file for mod classes Dont mind the debugging.
task getDex(type: Exec) {
    dependsOn getModJar
    description 'Converts mod class files to DEX format using D8 dependency'

    def outputDir = file('build/dex_output')

    inputs.dir('build/chimera')
    inputs.dir('build/mods')
    outputs.dir(outputDir)
    outputs.file(outputDir.toString()+"/classes.dex")

    doFirst {
        if (d8Jar == null) {
            throw new GradleException("D8 JAR not found in dependencies. Make sure R8 is included!")
        }
        outputDir.mkdirs()

        //Run d8 and pass it ChimeraAPI.jar & mod.jar
        commandLine 'java', '-jar', d8Jar, 'com.android.tools.r8.D8', '--output', outputDir, chimeraJar, modJar
        //Will yield classes.dex
    }
}

// Task to disassemble DEX into Smali
task getSmali(type: Exec) {
    dependsOn getDex
    description 'Disassembles DEX file into Smali code'

    inputs.file('build/dex_output/classes.dex')
    outputs.dir("build/smali")

    workingDir file('tools')

    commandLine 'java', '-jar', 'baksmali-2.5.2.jar', 'd',
            '../build/dex_output/classes.dex', '-o', '../build/smali'
}

//I made it work with remote apktool dependency rather than my local installation.
task deAPK(type: Exec){
    mustRunAfter getVanillaAPK
    workingDir file('saterskog')
    mkdir("saterskog/apk")

    commandLine 'java', '-jar', apktoolJar, 'd', 'cell.apk', '-o', './apk','-f'
}

//This should never be called alone, APK will have runtime errors if ChimeraHooks.smali isn't included inside
//This must run sequentially since patches are supposed to build ontop of the previos file's worth.
task patchAPK {
    inputs.dir('saterskog/apk/smali')
    doFirst {
        def chimeraFiles = chimeraDir.listFiles({ file -> file.name.endsWith('.chimera') } as FileFilter)

        if (!chimeraFiles) {
            throw new GradleException("No .chimera files found in ${chimeraDir.absolutePath}")
        }

        chimeraFiles.each { chimeraFile ->
            println "Patching: ${chimeraFile.absolutePath}"
            exec {
                workingDir projectDir
                commandLine 'java', '-jar', './tools/patcher.jar', 'saterskog/apk/smali', chimeraFile.absolutePath
            }
        }
    }

    doLast {
        println "All patches applied."
    }
}

// This will find source files (.java) for mods in com/saterskog/mods and add them to mods.txt
// Do note that only classes annotated @ChimeraMod will be loaded as mods.
// There is a hacky workaround maybe using static blocks but that's some nerd shit
//TODO: make a task that can find mod binaries (.jar?), convert to smali and also add them.
//TODO: maybe have gradle inspect jar, retrieve classes, update mods.txt THEN convert to smali and bundle inside APK.
//TODO: that should greatly simplify multi-mod bundling, skipping the compilation entirely for pre-compiled mods.
task findModSources {
    def directory = file('src/com/saterskog/mods')
    def outputFile = file('saterskog/mods.txt')

    inputs.dir('src/com/saterskog/mods')
    outputs.file('saterskog/mods.txt')

    doLast {
        outputFile.parentFile.mkdirs()
        outputFile.createNewFile()

        outputFile.text = ""

        directory.eachFileRecurse { file ->
            if (file.name.endsWith('.java')) {
                String fullyQualifiedName = file.path.replace(directory.path + File.separator, '')
                        .replace(File.separator, '.').replace('.java', '')

                outputFile.append('com.saterskog.mods.'+fullyQualifiedName + '\n')
            }
        }
    }
}

//This task should insert the mods.txt file inside apk/assets/ where it is expected to be.
task insertModManifest(type: Copy) {
    inputs.file('saterskog/apk/assets/mods.txt')

    from 'saterskog/mods.txt'
    into 'saterskog/apk/assets'
    doLast {
        if (!file('saterskog/mods.txt').exists()) {
            throw new GradleException("Could not fetch mod manifest file!")
        }
        if (!file('saterskog/apk/assets').exists()) {
            throw new GradleException("Assets folder does not exist. Make sure to decompile the apk correctly!")
        }
        println "Mod manifest successfully copied into assets folder"
    }
}

task insertModFiles(type: Copy) {
    dependsOn getSmali

    inputs.dir('saterskog/apk/smali/com/saterskog/mods')

    from 'build/smali/com/saterskog/mods'
    into 'saterskog/apk/smali/com/saterskog/mods'

    doFirst {
        def sourceDir = file('build/smali/com/saterskog/mods')
        if (!sourceDir.exists()) {
            throw new GradleException("Could not fetch mod smali files!")
        }
    }

    doLast {
        def destinationDir = file('saterskog/apk/smali/com/saterskog/mods')
        if (!destinationDir.exists()) {
            destinationDir.mkdirs()
            println "Created mods directory"
        }
        println "Mod files successfully bundled in APK"
    }
}

task insertChimeraHooks(type: Copy) {
    inputs.dir('build/smali/com/saterskog/cell_lab')

    from 'build/smali/com/saterskog/cell_lab'
    into 'saterskog/apk/smali/com/saterskog/cell_lab'

    doFirst {
        def sourceDir = file('build/smali/com/saterskog/cell_lab')
        if (!sourceDir.exists()) {
            throw new GradleException("Could not fetch Chimera smali files!")
        }
    }

    doLast {
        def destinationDir = file('saterskog/apk/smali/com/saterskog/cell_lab')
        if (!destinationDir.exists()) {
            destinationDir.mkdirs()
            println "Inserted Chimera core files"
        }
        println "Chimera core files successfully bundled in APK"
    }
}

task modAPK{
    dependsOn insertModManifest,insertChimeraHooks,insertModFiles,patchAPK
}

task APK(type: Exec){
    mustRunAfter modAPK
    mkdir("build/apk/signed")

    commandLine 'java', '-jar', apktoolJar, 'b', 'saterskog/apk', '-o', 'build/apk/mod.apk','-f'
}


// Task to clean the build directory
task cleanBuild(type: Delete) {
    description 'Deletes the build directory'
    delete 'build'
}

task cleanAPK(type: Delete) {
    description 'Cleans the apk decompilation directories'
    delete 'saterskog/apk'
}

//========================================v Gradle Task Aliases v========================================
tasks.register('bsjar'){dependsOn buildSourceJar}

tasks.register('bc'){dependsOn buildChimera}
tasks.register('bm'){dependsOn buildMod}

tasks.register('cb'){dependsOn cleanBuild}
tasks.register('ck'){dependsOn cleanAPK}

tasks.register('dk'){dependsOn deAPK}
tasks.register('fetch'){dependsOn getVanillaAPK,fetchDependencies}
//Pretty much does everything
tasks.register('apk'){dependsOn modAPK,APK}
//========================================^ Gradle Task Aliases ^========================================
